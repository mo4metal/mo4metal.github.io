{"title":"test","markdown":{"yaml":{"title":"test","author":"Zhemin Ong","date":"`r Sys.Date()`","output":"html_document"},"headingText":"IMDb Ratings for Community episodes (all seasons)","containsRefs":false,"markdown":"\n\n```{r}\n\nlibrary(tidyverse)\ncommunity <- read_csv(\"Community.csv\")\ncommunity_data <- community %>% select(-c(\"episode_num\"))\nlibrary(shiny)\n\n\n```\n\n\n```{r}\n\nseason_colors <- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))\n\n```\n\n## Bar graph: Mean imdb ratings by director\n\n```{r}\n\nlibrary(dplyr)\n\nbest_director <- community_data %>%\n  group_by(directed_by) %>%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %>%\n  arrange(desc(mean_imdb_rating))\n\nprint(best_director)\nggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()\n\n```\n\n## Scatterplot: IMDb Ratings for Community Episodes (Select season)\n\n```{r}\n\nlibrary(shiny)\nlibrary(ggplot2)\n\n\nui <- fluidPage(\n  titlePanel(\"IMDb Ratings for Community Episodes\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                  selected = \"1\")\n    ),\n    mainPanel(\n      plotOutput(\"scatter_plot\")\n    )\n  )\n)\n\n\nserver <- function(input, output) {\n  output$scatter_plot <- renderPlot({\n    season_data <- subset(community_data, season == input$season)\n  \n    ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +\n      geom_point() +\n      scale_color_manual(values = season_colors) +\n      labs(x = \"Episode\", y = \"IMDb Rating\", title = paste(\"IMDb Ratings for Community episodes (Season\", input$season, \")\")) +\n      theme(plot.margin = margin(r = 2, unit = \"cm\"))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\n\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\n# Create a line chart for Season 1\nggplot(season_1_data, aes(x = episode_num_in_season, y = us_viewers)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"red\", size = 1) +  # Add points for each data point\n  labs(title = \"Viewership Trend for Season 1\",\n       x = \"Episode Number\",\n       y = \"Viewership (USA)\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma)\n\n```\n\n## Line graph: Community Viewership Trends per Season\n\n```{r}\n\nlibrary(shiny)\nlibrary(tidyverse)\n\nui <- fluidPage(\n  titlePanel(\"Community Viewership Trends per Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))  \n    ),\n    \n    mainPanel(\n      plotOutput(\"linePlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  selected_season <- reactive({\n    filter(community_data, season == input$season)\n  })\n  \n\n  output$linePlot <- renderPlot({\n    ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +\n      geom_line(color = \"blue\") +\n      geom_point(color = \"red\", size = 1) +  \n      labs(title = paste(\"Viewership Trend for Season\", input$season),\n           x = \"Episode Number\",\n           y = \"Viewership\") +\n      scale_x_continuous(breaks = selected_season()$episode_num_in_season, \n                     labels = selected_season()$episode_num_in_season) +\n      theme_minimal() +  \n      scale_y_continuous(labels = scales::comma)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n```\n\n```{r}\n\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\nggplot(season_1_data, aes(x = us_viewers, y = imdb_rating)) +\n  geom_point(color = \"purple\", size = 2) +\n  labs(title = \"Relationship between IMDb Rating and Viewership for Season 1\",\n       x = \"Viewership\",\n       y = \"IMDb Rating\") +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::comma)  \n\n```\n\n## Scatterplot: Relationship between IMDb Rating and Viewership by Season\n\n```{r}\n\n\nui <- fluidPage(\n  titlePanel(\"Relationship between IMDb Rating and Viewership by Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))\n    ),\n    mainPanel(\n      plotOutput(\"scatterPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$scatterPlot <- renderPlot({\n    season_data <- community_data %>%\n      filter(season == input$season)\n    ggplot(season_data, aes(x = us_viewers, y = imdb_rating)) +\n      geom_point(color = \"blue\", size = 3) +\n      labs(title = paste(\"Relationship between IMDb Rating and Viewership for Season\", input$season),\n           x = \"Viewership\",\n           y = \"IMDb Rating\") +\n      theme_minimal() +\n      scale_x_continuous(labels = scales::comma)  \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n## Episode details (enter number overall)\n\n```{r}\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"episode_num_overall\", \"Enter Episode Number:\", value = 1, min = 1, max = max(community_data$episode_num_overall))\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  \n  # Function to retrieve episode details\n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(episode_num_overall == input$episode_num_overall) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc\n            )\n    }\n  })\n}\n\n\nshinyApp(ui = ui, server = server)\n```\n\n## Episode Details (Dropdown select)\n\n```{r}\n\n\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season Number:\",\n                  choices = unique(community_data$season)),\n      uiOutput(\"episode_select\")\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$episode_select <- renderUI({\n    episode_choices <- community_data %>%\n      filter(season == input$season) %>%\n      pull(episode_num_in_season) %>%\n      sort()\n    \n    selectInput(\"episode_num_in_season\", \"Select Episode Number:\",\n                choices = episode_choices)\n  })\n  \n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"Season:\", input$season, \"\\n\",\n            \"Episode Number:\", input$episode_num_in_season, \"\\n\",\n            \"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc)\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n\nlibrary(tidyverse)\ncommunity <- read_csv(\"Community.csv\")\ncommunity_data <- community %>% select(-c(\"episode_num\"))\nlibrary(shiny)\n\n\n```\n\n## IMDb Ratings for Community episodes (all seasons)\n\n```{r}\n\nseason_colors <- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))\n\n```\n\n## Bar graph: Mean imdb ratings by director\n\n```{r}\n\nlibrary(dplyr)\n\nbest_director <- community_data %>%\n  group_by(directed_by) %>%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %>%\n  arrange(desc(mean_imdb_rating))\n\nprint(best_director)\nggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()\n\n```\n\n## Scatterplot: IMDb Ratings for Community Episodes (Select season)\n\n```{r}\n\nlibrary(shiny)\nlibrary(ggplot2)\n\n\nui <- fluidPage(\n  titlePanel(\"IMDb Ratings for Community Episodes\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                  selected = \"1\")\n    ),\n    mainPanel(\n      plotOutput(\"scatter_plot\")\n    )\n  )\n)\n\n\nserver <- function(input, output) {\n  output$scatter_plot <- renderPlot({\n    season_data <- subset(community_data, season == input$season)\n  \n    ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +\n      geom_point() +\n      scale_color_manual(values = season_colors) +\n      labs(x = \"Episode\", y = \"IMDb Rating\", title = paste(\"IMDb Ratings for Community episodes (Season\", input$season, \")\")) +\n      theme(plot.margin = margin(r = 2, unit = \"cm\"))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\n\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\n# Create a line chart for Season 1\nggplot(season_1_data, aes(x = episode_num_in_season, y = us_viewers)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"red\", size = 1) +  # Add points for each data point\n  labs(title = \"Viewership Trend for Season 1\",\n       x = \"Episode Number\",\n       y = \"Viewership (USA)\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma)\n\n```\n\n## Line graph: Community Viewership Trends per Season\n\n```{r}\n\nlibrary(shiny)\nlibrary(tidyverse)\n\nui <- fluidPage(\n  titlePanel(\"Community Viewership Trends per Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))  \n    ),\n    \n    mainPanel(\n      plotOutput(\"linePlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  selected_season <- reactive({\n    filter(community_data, season == input$season)\n  })\n  \n\n  output$linePlot <- renderPlot({\n    ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +\n      geom_line(color = \"blue\") +\n      geom_point(color = \"red\", size = 1) +  \n      labs(title = paste(\"Viewership Trend for Season\", input$season),\n           x = \"Episode Number\",\n           y = \"Viewership\") +\n      scale_x_continuous(breaks = selected_season()$episode_num_in_season, \n                     labels = selected_season()$episode_num_in_season) +\n      theme_minimal() +  \n      scale_y_continuous(labels = scales::comma)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n```\n\n```{r}\n\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\nggplot(season_1_data, aes(x = us_viewers, y = imdb_rating)) +\n  geom_point(color = \"purple\", size = 2) +\n  labs(title = \"Relationship between IMDb Rating and Viewership for Season 1\",\n       x = \"Viewership\",\n       y = \"IMDb Rating\") +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::comma)  \n\n```\n\n## Scatterplot: Relationship between IMDb Rating and Viewership by Season\n\n```{r}\n\n\nui <- fluidPage(\n  titlePanel(\"Relationship between IMDb Rating and Viewership by Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))\n    ),\n    mainPanel(\n      plotOutput(\"scatterPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$scatterPlot <- renderPlot({\n    season_data <- community_data %>%\n      filter(season == input$season)\n    ggplot(season_data, aes(x = us_viewers, y = imdb_rating)) +\n      geom_point(color = \"blue\", size = 3) +\n      labs(title = paste(\"Relationship between IMDb Rating and Viewership for Season\", input$season),\n           x = \"Viewership\",\n           y = \"IMDb Rating\") +\n      theme_minimal() +\n      scale_x_continuous(labels = scales::comma)  \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n## Episode details (enter number overall)\n\n```{r}\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"episode_num_overall\", \"Enter Episode Number:\", value = 1, min = 1, max = max(community_data$episode_num_overall))\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  \n  # Function to retrieve episode details\n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(episode_num_overall == input$episode_num_overall) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc\n            )\n    }\n  })\n}\n\n\nshinyApp(ui = ui, server = server)\n```\n\n## Episode Details (Dropdown select)\n\n```{r}\n\n\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season Number:\",\n                  choices = unique(community_data$season)),\n      uiOutput(\"episode_select\")\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$episode_select <- renderUI({\n    episode_choices <- community_data %>%\n      filter(season == input$season) %>%\n      pull(episode_num_in_season) %>%\n      sort()\n    \n    selectInput(\"episode_num_in_season\", \"Select Episode Number:\",\n                choices = episode_choices)\n  })\n  \n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"Season:\", input$season, \"\\n\",\n            \"Episode Number:\", input$episode_num_in_season, \"\\n\",\n            \"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc)\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"working.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","title":"test","author":"Zhemin Ong","date":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}