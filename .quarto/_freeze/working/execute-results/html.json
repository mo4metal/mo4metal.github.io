{
  "hash": "54f5f725f31ab826624a7b8ad79f3bf9",
  "result": {
    "markdown": "---\ntitle: \"test\"\nauthor: \"Zhemin Ong\"\ndate: \"2024-04-02\"\noutput: html_document\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncommunity <- read_csv(\"Community.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 109 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): title, directed_by, written_by, desc dbl (9): ...1, season,\nepisode_num_in_season, episode_num_overall, prod_cod... date (1):\noriginal_air_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\ncommunity_data <- community %>% select(-c(\"episode_num\"))\nlibrary(shiny)\n```\n:::\n\n\n## IMDb Ratings for Community episodes (all seasons)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseason_colors <- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))\n```\n\n::: {.cell-output-display}\n![](working_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Bar graph: Mean imdb ratings by director\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nbest_director <- community_data %>%\n  group_by(directed_by) %>%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %>%\n  arrange(desc(mean_imdb_rating))\n\nprint(best_director)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 3\n   directed_by       mean_imdb_rating count\n   <chr>                        <dbl> <int>\n 1 Jeff Melman                   9.8      1\n 2 Anthony Hemingway             9.3      1\n 3 Richard Ayoade                9        1\n 4 Justin Lin                    8.8      3\n 5 Adam Davidson                 8.72     8\n 6 Duke Johnson                  8.7      1\n 7 Joe Russo                     8.52    20\n 8 Rob Schrab                    8.32    10\n 9 Tristram Shapeero             8.23    24\n10 Dan Eckman                    8.2      1\n# ℹ 16 more rows\n```\n:::\n\n```{.r .cell-code}\nggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](working_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Scatterplot: IMDb Ratings for Community Episodes (Select season)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(ggplot2)\n\n\nui <- fluidPage(\n  titlePanel(\"IMDb Ratings for Community Episodes\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                  selected = \"1\")\n    ),\n    mainPanel(\n      plotOutput(\"scatter_plot\")\n    )\n  )\n)\n\n\nserver <- function(input, output) {\n  output$scatter_plot <- renderPlot({\n    season_data <- subset(community_data, season == input$season)\n  \n    ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +\n      geom_point() +\n      scale_color_manual(values = season_colors) +\n      labs(x = \"Episode\", y = \"IMDb Rating\", title = paste(\"IMDb Ratings for Community episodes (Season\", input$season, \")\")) +\n      theme(plot.margin = margin(r = 2, unit = \"cm\"))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\n# Create a line chart for Season 1\nggplot(season_1_data, aes(x = episode_num_in_season, y = us_viewers)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"red\", size = 1) +  # Add points for each data point\n  labs(title = \"Viewership Trend for Season 1\",\n       x = \"Episode Number\",\n       y = \"Viewership (USA)\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma)\n```\n\n::: {.cell-output-display}\n![](working_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Line graph: Community Viewership Trends per Season\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyverse)\n\nui <- fluidPage(\n  titlePanel(\"Community Viewership Trends per Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))  \n    ),\n    \n    mainPanel(\n      plotOutput(\"linePlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  selected_season <- reactive({\n    filter(community_data, season == input$season)\n  })\n  \n\n  output$linePlot <- renderPlot({\n    ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +\n      geom_line(color = \"blue\") +\n      geom_point(color = \"red\", size = 1) +  \n      labs(title = paste(\"Viewership Trend for Season\", input$season),\n           x = \"Episode Number\",\n           y = \"Viewership\") +\n      theme_minimal() +  \n      scale_y_continuous(labels = scales::comma)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nseason_1_data <- community_data %>%\n  filter(season == 1)\n\nggplot(season_1_data, aes(x = us_viewers, y = imdb_rating)) +\n  geom_point(color = \"purple\", size = 2) +\n  labs(title = \"Relationship between IMDb Rating and Viewership for Season 1\",\n       x = \"Viewership\",\n       y = \"IMDb Rating\") +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::comma)  \n```\n\n::: {.cell-output-display}\n![](working_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Scatterplot: Relationship between IMDb Rating and Viewership by Season\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Relationship between IMDb Rating and Viewership by Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))\n    ),\n    mainPanel(\n      plotOutput(\"scatterPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$scatterPlot <- renderPlot({\n    season_data <- community_data %>%\n      filter(season == input$season)\n    ggplot(season_data, aes(x = us_viewers, y = imdb_rating)) +\n      geom_point(color = \"blue\", size = 3) +\n      labs(title = paste(\"Relationship between IMDb Rating and Viewership for Season\", input$season),\n           x = \"Viewership\",\n           y = \"IMDb Rating\") +\n      theme_minimal() +\n      scale_x_continuous(labels = scales::comma)  \n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n## Episode details (enter number overall)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"episode_num_overall\", \"Enter Episode Number:\", value = 1, min = 1, max = max(community_data$episode_num_overall))\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  \n  # Function to retrieve episode details\n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(episode_num_overall == input$episode_num_overall) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc\n            )\n    }\n  })\n}\n\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n## Episode Details (Dropdown select)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season Number:\",\n                  choices = unique(community_data$season)),\n      uiOutput(\"episode_select\")\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$episode_select <- renderUI({\n    episode_choices <- community_data %>%\n      filter(season == input$season) %>%\n      pull(episode_num_in_season) %>%\n      sort()\n    \n    selectInput(\"episode_num_in_season\", \"Select Episode Number:\",\n                choices = episode_choices)\n  })\n  \n  output$episode_details <- renderText({\n    episode_details <- community_data %>%\n      filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%\n      select(imdb_rating, title, desc, directed_by) %>%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"Season:\", input$season, \"\\n\",\n            \"Episode Number:\", input$episode_num_in_season, \"\\n\",\n            \"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc)\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [
      "working_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}