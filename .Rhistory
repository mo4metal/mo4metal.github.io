mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='mo4metal',
token='3FF0EB95C1553BBDB9771DC98F090904',
secret='3R6ayLZdXT00ihNxm1nzWzg8E5SistrERTCaZV5X')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='mo4metal', token='3FF0EB95C1553BBDB9771DC98F090904', secret='3R6ayLZdXT00ihNxm1nzWzg8E5SistrERTCaZV5X')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
# Load necessary libraries
library(shiny)
library(tidyverse)
# Define UI
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Create dynamic UI for episode selection based on season number
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season)
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
# Function to retrieve episode details
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$IMDb_rating, "\n",
"Title:", episode_details$episode_title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$description)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(tidyverse)
# Define UI
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Create dynamic UI for episode selection based on season number
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season)
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
# Function to retrieve episode details
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
server <- function(input, output, session) {
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season)
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
server <- function(input, output, session) {
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season) %>%
sort()
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
server <- function(input, output, session) {
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season) %>%
sort()
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
server <- function(input, output, session) {
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season) %>%
sort()
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
shinyApp(ui = ui, server = server)
View(community_data)
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
print(best_director)
ggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ui <- fluidPage(
titlePanel("Find Episode Details"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season Number:",
choices = unique(community_data$season)),
uiOutput("episode_select")
),
mainPanel(
h4("Episode Details:"),
verbatimTextOutput("episode_details")
)
)
)
server <- function(input, output, session) {
output$episode_select <- renderUI({
episode_choices <- community_data %>%
filter(season == input$season) %>%
pull(episode_num_in_season) %>%
sort()
selectInput("episode_num_in_season", "Select Episode Number:",
choices = episode_choices)
})
output$episode_details <- renderText({
episode_details <- community_data %>%
filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %>%
select(imdb_rating, title, desc, directed_by) %>%
slice(1)
if (nrow(episode_details) == 0) {
"Episode not found."
} else {
paste("Season:", input$season, "\n",
"Episode Number:", input$episode_num_in_season, "\n",
"IMDb Rating:", episode_details$imdb_rating, "\n",
"Title:", episode_details$title, "\n",
"Directed by:", episode_details$directed_by, "\n",
"Description:", episode_details$desc)
}
})
}
shinyApp(ui = ui, server = server)
