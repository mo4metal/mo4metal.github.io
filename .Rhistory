selected = "1")
),
mainPanel(
plotOutput("scatter_plot")
)
)
)
server <- function(input, output) {
output$scatter_plot <- renderPlot({
season_data <- subset(community_data, season == input$season)
ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +
geom_point() +
scale_color_manual(values = season_colors) +
labs(x = "Episode", y = "IMDb Rating", title = paste("IMDb Ratings for Community episodes (Season", input$season, ")")) +
theme(plot.margin = margin(r = 2, unit = "cm"))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Relationship between IMDb Rating and Viewership by Season"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = unique(community_data$season))
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlot({
season_data <- community_data %>%
filter(season == input$season)
ggplot(season_data, aes(x = us_viewers, y = imdb_rating)) +
geom_point(color = "blue", size = 3) +
labs(title = paste("Relationship between IMDb Rating and Viewership for Season", input$season),
x = "Viewership",
y = "IMDb Rating") +
theme_minimal() +
scale_x_continuous(labels = scales::comma)
})
}
shinyApp(ui = ui, server = server)
runApp('app2.R')
runApp('personal app')
runApp('personal app/app2.R')
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
print(best_director)
ggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
print(best_director)
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
View(community_data)
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ggplot(data, aes(x = season, y = us_viewers)) +
geom_point() +
labs(x = "Season", y = "Number of Viewers", title = "Viewership Trends of Episodes Over Seasons")
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ggplot(community, aes(x = season, y = us_viewers)) +
geom_point() +
labs(x = "Season", y = "Number of Viewers", title = "Viewership Trends of Episodes Over Seasons")
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ggplot(community, aes(x = season, y = us_viewers)) +
geom_point() +
scale_y_continuous(labels = scales::comma) +
labs(x = "Season", y = "Number of Viewers", title = "Viewership Trends of Episodes Over Seasons")
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ggplot(community, aes(x = season, y = us_viewers)) +
geom_point() +
scale_y_continuous(labels = scales::comma, limits = c(1000000, 8000000)) +
labs(x = "Season", y = "Number of Viewers", title = "Viewership Trends of Episodes Over Seasons")
library(shiny)
library(tidyverse)
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
library(shiny)
ui <- fluidPage(
titlePanel("IMDb Ratings for Community Episodes"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = c("1", "2", "3", "4", "5", "6"),
selected = "1")
),
mainPanel(
plotOutput("scatter_plot")
)
)
)
server <- function(input, output) {
output$scatter_plot <- renderPlot({
season_data <- subset(community_data, season == input$season)
ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +
geom_point() +
scale_color_manual(values = season_colors) +
labs(x = "Episode", y = "IMDb Rating", title = paste("IMDb Ratings for Community episodes (Season", input$season, ")")) +
theme(plot.margin = margin(r = 2, unit = "cm"))
})
}
shinyApp(ui = ui, server = server)
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, -mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
runApp('imdb rating per season')
library(shiny)
library(tidyverse)
ui <- fluidPage(
titlePanel("Community Viewership Trends per Season"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = unique(community_data$season))
),
mainPanel(
plotOutput("linePlot")
)
)
)
server <- function(input, output) {
selected_season <- reactive({
filter(community_data, season == input$season)
})
output$linePlot <- renderPlot({
ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 1) +
labs(title = paste("Viewership Trend for Season", input$season),
x = "Episode Number",
y = "Viewership") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
titlePanel("Community Viewership Trends per Season"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = unique(community_data$season))
),
mainPanel(
plotOutput("linePlot")
)
)
)
server <- function(input, output) {
selected_season <- reactive({
filter(community_data, season == input$season)
})
output$linePlot <- renderPlot({
ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 1) +
labs(title = paste("Viewership Trend for Season", input$season),
x = "Episode Number",
y = "Viewership") +
scale_x_continuous(breaks = selected_season$episode_num_in_season,
labels = selected_season$episode_num_in_season)
theme_minimal() +
scale_y_continuous(labels = scales::comma)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
titlePanel("Community Viewership Trends per Season"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = unique(community_data$season))
),
mainPanel(
plotOutput("linePlot")
)
)
)
server <- function(input, output) {
selected_season <- reactive({
filter(community_data, season == input$season)
})
output$linePlot <- renderPlot({
ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 1) +
labs(title = paste("Viewership Trend for Season", input$season),
x = "Episode Number",
y = "Viewership") +
scale_x_continuous(breaks = selected_season$episode_num_in_season,
labels = selected_season$episode_num_in_season) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
titlePanel("Community Viewership Trends per Season"),
sidebarLayout(
sidebarPanel(
selectInput("season", "Select Season:",
choices = unique(community_data$season))
),
mainPanel(
plotOutput("linePlot")
)
)
)
server <- function(input, output) {
selected_season <- reactive({
filter(community_data, season == input$season)
})
output$linePlot <- renderPlot({
ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 1) +
labs(title = paste("Viewership Trend for Season", input$season),
x = "Episode Number",
y = "Viewership") +
scale_x_continuous(breaks = selected_season()$episode_num_in_season,
labels = selected_season()$episode_num_in_season) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
})
}
shinyApp(ui = ui, server = server)
runApp('viewership per season')
View(best_director)
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(stat = "identity", fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(stat = count(), fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(stat = "count", fill = "pink", width = 0.7) +
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count)),
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count))+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), vjust = -0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), vjust = -1, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), vjust = 0, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), vjust = -0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), vjust = 0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), hjust = 2, vjust = 0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), hjust = -2, vjust = 0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), hjust = -1, vjust = 0.5, size = 3, color = "black")+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
library(dplyr)
best_director <- community_data %>%
group_by(directed_by) %>%
summarise(mean_imdb_rating = mean(imdb_rating),
episodes_count = n()) %>%
arrange(desc(mean_imdb_rating))
ggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +
geom_col(fill = "pink", width = 0.7) +
geom_text(aes(label = episodes_count), hjust = -1, vjust = 0.5, size = 3)+
labs(x = "Director", y = "Mean IMDb Rating", title = "Mean IMDb Ratings by Director") +
theme_minimal() +
coord_flip()
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
View(community_data)
runApp('imdb rating per season')
runApp('imdb rating per season')
shiny::runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
community <- read_csv("Community.csv")
community_data <- community %>% select(-c("episode_num"))
View(community_data)
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
runApp('imdb viewership')
mean_ratings <- community_data %>%
group_by(season) %>%
summarize(mean_imdb_rating = mean(imdb_rating, na.rm = TRUE))
ggplot(mean_ratings, aes(x = season, y = mean_imdb_rating)) +
geom_col(stat = "identity", fill = "mediumpurple") +
geom_text(aes(label = sprintf("%.1f", mean_imdb_rating)),
color = "white", vjust = 10, fontface = "bold") +
labs(x = "Season", y = "Mean IMDb Rating", title = "Mean IMDb Ratings for Each Season") +
theme_minimal() +
scale_y_continuous(breaks = seq(0, 11, by = 1)) +
scale_x_continuous(breaks = mean_ratings$season, labels = mean_ratings$season)
mean_ratings <- community_data %>%
group_by(season) %>%
summarize(mean_imdb_rating = mean(imdb_rating, na.rm = TRUE))
ggplot(mean_ratings, aes(x = season, y = mean_imdb_rating)) +
geom_col(stat = "identity", fill = "mediumpurple") +
geom_text(aes(label = sprintf("%.1f", mean_imdb_rating)),
color = "white", vjust = 10, fontface = "bold") +
labs(x = "Season", y = "Mean IMDb Rating", title = "Mean IMDb Ratings for Each Season") +
theme_minimal() +
scale_y_continuous(breaks = seq(0, 11, by = 1)) +
scale_x_continuous(breaks = mean_ratings$season, labels = mean_ratings$season)
ggplot(community, aes(x = season, y = us_viewers)) +
geom_point() +
scale_y_continuous(labels = scales::comma, limits = c(1000000, 8000000)) +
labs(x = "Season", y = "Number of Viewers", title = "Viewership Trends of Episodes Over Seasons")
runApp('imdb rating per season')
runApp('imdb rating per season')
runApp('imdb rating per season')
