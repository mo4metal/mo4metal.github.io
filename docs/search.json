[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Zhe Min’s NM2207 Website",
    "section": "",
    "text": "Community was an American sitcom produced by NBC that ran from 2009 to 2014. It had a historically rocky start, middle and end, with show runner Dan Harmon being fired midway during the show, before being brought back for the show’s 5th and 6th seasons.\n\n\n\nCommunity frequently experimented with genre and often utilised its sitcom format to parody existing sitcom tropes. This led it to become a cult classic amongst fans who were frequently exposed to and aware of such tropes, but it meant that Community did not do well with the masses.\nThus, I plan to explore the trends within Community’s rise and fall, with an analysis of each episode’s IMDb ratings. I will also look at categories such as directors and even episode titles. Since Community ran for 6 seasons and 110 episodes, it makes for quite a detailed and interesting analysis.\n\n\n\nI will be using this dataset uploaded by Bill Cruise, which was updated 2 years ago."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "ABOUT ME\nI am a Y3 Literature major with a second major in Communications and New Media.\nI like cats and Pierce the Veil :) My favourite TV shows are NBC’s 30 Rock, Community and Netflix’s Russian Doll."
  },
  {
    "objectID": "index.html#community-2009-2014",
    "href": "index.html#community-2009-2014",
    "title": "Zhe Min’s NM2207 Website",
    "section": "",
    "text": "Community was an American sitcom produced by NBC that ran from 2009 to 2014. It had a historically rocky start, middle and end, with show runner Dan Harmon being fired midway during the show, before being brought back for the show’s 5th and 6th seasons."
  },
  {
    "objectID": "index.html#data-analysis",
    "href": "index.html#data-analysis",
    "title": "Zhe Min’s NM2207 Website",
    "section": "",
    "text": "Community frequently experimented with genre and often utilised its sitcom format to parody existing sitcom tropes. This led it to become a cult classic amongst fans who were frequently exposed to and aware of such tropes, but it meant that Community did not do well with the masses.\nThus, I plan to explore the trends within Community’s rise and fall, with an analysis of each episode’s IMDb ratings. I will also look at categories such as directors and even episode titles. Since Community ran for 6 seasons and 110 episodes, it makes for quite a detailed and interesting analysis."
  },
  {
    "objectID": "index.html#dataset",
    "href": "index.html#dataset",
    "title": "Zhe Min’s NM2207 Website",
    "section": "",
    "text": "I will be using this dataset uploaded by Bill Cruise, which was updated 2 years ago."
  },
  {
    "objectID": "data_story.html",
    "href": "data_story.html",
    "title": "Data Story",
    "section": "",
    "text": "Select an episode to learn more about it!\n \n\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncommunity &lt;- read_csv(\"Community.csv\")\n\nNew names:\nRows: 109 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): title, directed_by, written_by, desc dbl (9): ...1, season,\nepisode_num_in_season, episode_num_overall, prod_cod... date (1):\noriginal_air_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ncommunity_data &lt;- community %&gt;% select(-c(\"episode_num\"))\nlibrary(shiny)\nlibrary(ggplot2)\n\nseason_colors &lt;- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))\n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n\nggplot(community, aes(x = season, y = us_viewers)) +\n  geom_point() +\n  scale_y_continuous(labels = scales::comma, limits = c(1000000, 8000000)) +\n  labs(x = \"Season\", y = \"Number of Viewers\", title = \"Viewership Trends of Episodes Over Seasons\")\n\nWarning: Removed 13 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n \n\n\n\n\nlibrary(dplyr)\n\nbest_director &lt;- community_data %&gt;%\n  group_by(directed_by) %&gt;%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %&gt;%\n  arrange(desc(mean_imdb_rating))\n\n\nggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()"
  },
  {
    "objectID": "data_story.html#episode-summaries",
    "href": "data_story.html#episode-summaries",
    "title": "Data Story",
    "section": "",
    "text": "Select an episode to learn more about it!"
  },
  {
    "objectID": "data_story.html#imdb-ratings-for-community-episodes-all-seasons",
    "href": "data_story.html#imdb-ratings-for-community-episodes-all-seasons",
    "title": "Data Story",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncommunity &lt;- read_csv(\"Community.csv\")\n\nNew names:\nRows: 109 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): title, directed_by, written_by, desc dbl (9): ...1, season,\nepisode_num_in_season, episode_num_overall, prod_cod... date (1):\noriginal_air_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ncommunity_data &lt;- community %&gt;% select(-c(\"episode_num\"))\nlibrary(shiny)\nlibrary(ggplot2)\n\nseason_colors &lt;- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))"
  },
  {
    "objectID": "working.html",
    "href": "working.html",
    "title": "test",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncommunity &lt;- read_csv(\"Community.csv\")\n\nNew names:\nRows: 109 Columns: 14\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): title, directed_by, written_by, desc dbl (9): ...1, season,\nepisode_num_in_season, episode_num_overall, prod_cod... date (1):\noriginal_air_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ncommunity_data &lt;- community %&gt;% select(-c(\"episode_num\"))\nlibrary(shiny)"
  },
  {
    "objectID": "working.html#imdb-ratings-for-community-episodes-all-seasons",
    "href": "working.html#imdb-ratings-for-community-episodes-all-seasons",
    "title": "test",
    "section": "IMDb Ratings for Community episodes (all seasons)",
    "text": "IMDb Ratings for Community episodes (all seasons)\n\nseason_colors &lt;- c(\"1\" = \"blue\",\n                   \"2\" = \"green\",\n                   \"3\" = \"red\",\n                   \"4\" = \"orange\",\n                   \"5\" = \"purple\",\n                   \"6\" = \"black\")\n\n\nggplot(community_data, aes(x = episode_num_overall, y = imdb_rating, color = as.factor(season))) +\n  geom_point() +\n  scale_color_manual(values = season_colors) +\n  labs(x = \"Episode\", \n       y = \"IMDb Rating\", \n       title = \"IMDb Ratings for Community episodes\", color = \"Season\") +\n  theme(plot.margin = margin(r = 2, unit = \"cm\"))"
  },
  {
    "objectID": "working.html#bar-graph-mean-imdb-ratings-by-director",
    "href": "working.html#bar-graph-mean-imdb-ratings-by-director",
    "title": "test",
    "section": "Bar graph: Mean imdb ratings by director",
    "text": "Bar graph: Mean imdb ratings by director\n\nlibrary(dplyr)\n\nbest_director &lt;- community_data %&gt;%\n  group_by(directed_by) %&gt;%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %&gt;%\n  arrange(desc(mean_imdb_rating))\n\nprint(best_director)\n\n# A tibble: 26 × 3\n   directed_by       mean_imdb_rating count\n   &lt;chr&gt;                        &lt;dbl&gt; &lt;int&gt;\n 1 Jeff Melman                   9.8      1\n 2 Anthony Hemingway             9.3      1\n 3 Richard Ayoade                9        1\n 4 Justin Lin                    8.8      3\n 5 Adam Davidson                 8.72     8\n 6 Duke Johnson                  8.7      1\n 7 Joe Russo                     8.52    20\n 8 Rob Schrab                    8.32    10\n 9 Tristram Shapeero             8.23    24\n10 Dan Eckman                    8.2      1\n# ℹ 16 more rows\n\nggplot(best_director, aes(x = directed_by, y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()"
  },
  {
    "objectID": "working.html#scatterplot-imdb-ratings-for-community-episodes-select-season",
    "href": "working.html#scatterplot-imdb-ratings-for-community-episodes-select-season",
    "title": "test",
    "section": "Scatterplot: IMDb Ratings for Community Episodes (Select season)",
    "text": "Scatterplot: IMDb Ratings for Community Episodes (Select season)\n\nlibrary(shiny)\nlibrary(ggplot2)\n\n\nui &lt;- fluidPage(\n  titlePanel(\"IMDb Ratings for Community Episodes\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n                  selected = \"1\")\n    ),\n    mainPanel(\n      plotOutput(\"scatter_plot\")\n    )\n  )\n)\n\n\nserver &lt;- function(input, output) {\n  output$scatter_plot &lt;- renderPlot({\n    season_data &lt;- subset(community_data, season == input$season)\n  \n    ggplot(season_data, aes(x = episode_num_overall, y = imdb_rating)) +\n      geom_point() +\n      scale_color_manual(values = season_colors) +\n      labs(x = \"Episode\", y = \"IMDb Rating\", title = paste(\"IMDb Ratings for Community episodes (Season\", input$season, \")\")) +\n      theme(plot.margin = margin(r = 2, unit = \"cm\"))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nseason_1_data &lt;- community_data %&gt;%\n  filter(season == 1)\n\n# Create a line chart for Season 1\nggplot(season_1_data, aes(x = episode_num_in_season, y = us_viewers)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"red\", size = 1) +  # Add points for each data point\n  labs(title = \"Viewership Trend for Season 1\",\n       x = \"Episode Number\",\n       y = \"Viewership (USA)\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma)"
  },
  {
    "objectID": "working.html#line-graph-community-viewership-trends-per-season",
    "href": "working.html#line-graph-community-viewership-trends-per-season",
    "title": "test",
    "section": "Line graph: Community Viewership Trends per Season",
    "text": "Line graph: Community Viewership Trends per Season\n\nlibrary(shiny)\nlibrary(tidyverse)\n\nui &lt;- fluidPage(\n  titlePanel(\"Community Viewership Trends per Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))  \n    ),\n    \n    mainPanel(\n      plotOutput(\"linePlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  selected_season &lt;- reactive({\n    filter(community_data, season == input$season)\n  })\n  \n\n  output$linePlot &lt;- renderPlot({\n    ggplot(selected_season(), aes(x = episode_num_in_season, y = us_viewers)) +\n      geom_line(color = \"blue\") +\n      geom_point(color = \"red\", size = 1) +  \n      labs(title = paste(\"Viewership Trend for Season\", input$season),\n           x = \"Episode Number\",\n           y = \"Viewership\") +\n      theme_minimal() +  \n      scale_y_continuous(labels = scales::comma)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nseason_1_data &lt;- community_data %&gt;%\n  filter(season == 1)\n\nggplot(season_1_data, aes(x = us_viewers, y = imdb_rating)) +\n  geom_point(color = \"purple\", size = 2) +\n  labs(title = \"Relationship between IMDb Rating and Viewership for Season 1\",\n       x = \"Viewership\",\n       y = \"IMDb Rating\") +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::comma)"
  },
  {
    "objectID": "working.html#scatterplot-relationship-between-imdb-rating-and-viewership-by-season",
    "href": "working.html#scatterplot-relationship-between-imdb-rating-and-viewership-by-season",
    "title": "test",
    "section": "Scatterplot: Relationship between IMDb Rating and Viewership by Season",
    "text": "Scatterplot: Relationship between IMDb Rating and Viewership by Season\n\nui &lt;- fluidPage(\n  titlePanel(\"Relationship between IMDb Rating and Viewership by Season\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season:\",\n                  choices = unique(community_data$season))\n    ),\n    mainPanel(\n      plotOutput(\"scatterPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  \n  output$scatterPlot &lt;- renderPlot({\n    season_data &lt;- community_data %&gt;%\n      filter(season == input$season)\n    ggplot(season_data, aes(x = us_viewers, y = imdb_rating)) +\n      geom_point(color = \"blue\", size = 3) +\n      labs(title = paste(\"Relationship between IMDb Rating and Viewership for Season\", input$season),\n           x = \"Viewership\",\n           y = \"IMDb Rating\") +\n      theme_minimal() +\n      scale_x_continuous(labels = scales::comma)  \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "working.html#episode-details-enter-number-overall",
    "href": "working.html#episode-details-enter-number-overall",
    "title": "test",
    "section": "Episode details (enter number overall)",
    "text": "Episode details (enter number overall)\n\nui &lt;- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"episode_num_overall\", \"Enter Episode Number:\", value = 1, min = 1, max = max(community_data$episode_num_overall))\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Function to retrieve episode details\n  output$episode_details &lt;- renderText({\n    episode_details &lt;- community_data %&gt;%\n      filter(episode_num_overall == input$episode_num_overall) %&gt;%\n      select(imdb_rating, title, desc, directed_by) %&gt;%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc\n            )\n    }\n  })\n}\n\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "working.html#episode-details-dropdown-select",
    "href": "working.html#episode-details-dropdown-select",
    "title": "test",
    "section": "Episode Details (Dropdown select)",
    "text": "Episode Details (Dropdown select)\n\nui &lt;- fluidPage(\n  titlePanel(\"Find Episode Details\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"season\", \"Select Season Number:\",\n                  choices = unique(community_data$season)),\n      uiOutput(\"episode_select\")\n    ),\n    mainPanel(\n      h4(\"Episode Details:\"),\n      verbatimTextOutput(\"episode_details\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  output$episode_select &lt;- renderUI({\n    episode_choices &lt;- community_data %&gt;%\n      filter(season == input$season) %&gt;%\n      pull(episode_num_in_season) %&gt;%\n      sort()\n    \n    selectInput(\"episode_num_in_season\", \"Select Episode Number:\",\n                choices = episode_choices)\n  })\n  \n  output$episode_details &lt;- renderText({\n    episode_details &lt;- community_data %&gt;%\n      filter(season == input$season, episode_num_in_season == input$episode_num_in_season) %&gt;%\n      select(imdb_rating, title, desc, directed_by) %&gt;%\n      slice(1)\n    \n    if (nrow(episode_details) == 0) {\n      \"Episode not found.\"\n    } else {\n      paste(\"Season:\", input$season, \"\\n\",\n            \"Episode Number:\", input$episode_num_in_season, \"\\n\",\n            \"IMDb Rating:\", episode_details$imdb_rating, \"\\n\",\n            \"Title:\", episode_details$title, \"\\n\",\n            \"Directed by:\", episode_details$directed_by, \"\\n\",\n            \"Description:\", episode_details$desc)\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "data_story.html#viewership-trends-over-the-seasons",
    "href": "data_story.html#viewership-trends-over-the-seasons",
    "title": "Data Story",
    "section": "",
    "text": "ggplot(community, aes(x = season, y = us_viewers)) +\n  geom_point() +\n  scale_y_continuous(labels = scales::comma, limits = c(1000000, 8000000)) +\n  labs(x = \"Season\", y = \"Number of Viewers\", title = \"Viewership Trends of Episodes Over Seasons\")\n\nWarning: Removed 13 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "data_story.html#mean-imdb-rating-by-director",
    "href": "data_story.html#mean-imdb-rating-by-director",
    "title": "Data Story",
    "section": "",
    "text": "library(dplyr)\n\nbest_director &lt;- community_data %&gt;%\n  group_by(directed_by) %&gt;%\n  summarise(mean_imdb_rating = mean(imdb_rating), \n            count = n()) %&gt;%\n  arrange(desc(mean_imdb_rating))\n\n\nggplot(best_director, aes(x = reorder(directed_by, mean_imdb_rating), y = mean_imdb_rating)) +\n  geom_col(fill = \"pink\", width = 0.7) +\n  labs(x = \"Director\", y = \"Mean IMDb Rating\", title = \"Mean IMDb Ratings by Director\") +\n  theme_minimal() +\n  coord_flip()"
  }
]